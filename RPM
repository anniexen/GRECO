module Planning

using LinearAlgebra
using NearestNeighbors
using LightGraphs
using Graphs

include("PRM_functions.jl")
include("misc.jl")

function PRM(s,g,O)
    # Description: this functions obtains the shortest path using the original
    # probabilistic road map Planning using random sampling and connecting k-nearest
    # points in free space. The collissions checks are done for a robot of radious 1m
    # and for spheres and cylinders as obstacles. The shortest path is found using
    # dijkstra algorithm (change for A*). It accepts s and g
    # as initial and final positions, these will be changed in a future version for
    # 4x4 homogeneous transformations.

    # Establish map limits
    Max_buffer=2;
    Map=[round(min(O[:,1]...))-Max_buffer round(max(O[:,1]...))+Max_buffer;
    round(min(O[:,2]...))-Max_buffer round(max(O[:,2]...))+Max_buffer;
    0 round(max(O[:,1]...))+Max_buffer]

    # Generate RoadMapPRM
    Grid, Edges=RoadMapPRM(s,g,O,Map);

    # Optimal path with # FIX or find alternative like A*
    #Path=get_shortest_path(Edges[:,1],Edges[:,2],Edges[:,3],1,2)      # Using LightGraphs but does not work in 3D, SimpleGraph error
    #sp = shortest_path(Edges[:,1:2],Edges[:,3], 1, 2)                  # Using Graphs, how to generate the graph input
    #return Path, Grid

    struct PRMinputs
       sx::Float64  #starting position
       sy::Float64
       sz::Float64
       gx::Float64  #goal position
       gy::Float64
       gz::Float64
       osx::Array{Float64} #obstacles starting x
       ofx::Array{Float64} #obstacles ending x
       osy::Array{Float64} #obstacles starting y
       ofy::Array{Float64} #obstacles ending y
       osz::Array{Float64} #obstacles starting z
       ofz::Array{Float64} #obstacles ending z
       res::Float64 #grid resolution
    end

    function ndgrid(v1::AbstractVector{T}, v2::AbstractVector{T}, v3::AbstractVector{T}) where T
        m, n, k = length(v1), length(v2), length(v3)
        v1 = reshape(v1, m, 1)
        v2 = reshape(v2, 1, n)
        v3 = reshape(v3, 1, k)
        (repeat(v1, 1, n), repeat(v2, m, 1), repeat(v3,k,1))
    end

    function freeSpaceNodes(inp::PRMinputs)
       # Nodes in working area
       # Assumes that the goal point is within the reachable space
       v1 = collect(inp.sx:inp.res:inp.gx);
       v2 = collect(inp.sy:inp.res:inp.gy);
       v3 = collect(inp.sz:inp.res:inp.gz);
       wrkX,wrkY = ndgrid(v1,v2,v3);
       wrkX = vec(wrkX);
       wrkY = vec(wrkY);
       wrkZ = vec(wrkZ);
       nWrk = size(wrkX,1);
       wrkC = hcat(wrkX,wrkY,wrkZ);
       # Nodes inside obstacles
       nObs = size(inp.osx,1);
       obsX = Array{Float64}(undef,0);
       obsY = Array{Float64}(undef,0);
       obsZ = Array{Float64}(undef,0);
       for i = 1:nObs
           obsx = Array{Float64}(undef,0);
           obsy = Array{Float64}(undef,0);
           obsz = Array{Float64}(undef,0);
           vo1 = collect(inp.osx[i]:inp.res:inp.ofx[i]);
           vo2 = collect(inp.osy[i]:inp.res:inp.ofy[i]);
           vo3 = collect(inp.osz[i]:inp.res:inp.ofz[i]);
           obsx,obsy = ndgrid(vo1,vo2,vo3);
           append!(obsX,vec(obsx));
           append!(obsY,vec(obsy));
           append!(obsZ,vec(obsz));
       end
       obsC = hcat(obsX,obsY,obsZ);

       # Nodes in free space
       idx = Array{Int64}(undef,0);
       for i = 1:nWrk
           check=[];
           for j = 1:size(obsC,1)
               append!(check,(wrkC[i,:]==obsC[j,:]));
           end
           if all(check.==false)
           append!(idx,i)
           end
       end
       fsC = wrkC[idx,:];
       return fsC, obsC,idx
    end

    #function collisionCheck(x::Float64,y::Float64,z::Float64, urdf::String)
    function collisionCheck()
       check = rand([0,1])==0;
       return check
    end

    function sampleConfigs(inp::PRMinputs,fsC::Array{Float64,2},nSamples::Int64)
       #Collision free configurations in free space
       fsX = fsC[:,1];
       fsY = fsC[:,2];
       fsZ = fsC[:,3];
       cfX = Array{Float64}(undef,0);
       cfY = Array{Float64}(undef,0);
       cfZ = Array{Float64}(undef,0);
       for i = 1:size(fsX,1)
           urdf = 10;
           if collisionCheck() == false
              append!(cfX,fsX[i,1]);
              append!(cfY,fsY[i,1]);
              append!(cfZ,fsZ[i,1]);
           end
       end
       idx = rand(1:size(cfX,1),1,nSamples);
       sampleX = cfX[idx];
       sampleY = cfY[idx];
       sampleZ = cfZ[idx];
       sampleX = hcat(inp.sx, sampleX, inp.gx);
       sampleY = hcat(inp.sy, sampleY, inp.gy);
       sampleZ = hcat(inp.sy, sampleZ, inp.gy);
       sampleC = hcat(sampleX',sampleY',sampleZ');
       return sampleC
    end

    #Shortest Path with A* Algorithm
    prmPath = a_star(g, 1, size(sampleC,1));
    g_path = SimpleGraphFromIterator(prmPath);
    E_p = collect(edges(g_path));

    srcNds = Array{Int64,1}(undef,ne(g_path));
    dstNds = Array{Int64,1}(undef,ne(g_path));
    for i=1:ne(g_path)
       srcNds[i] = src(E_p[i]);
       dstNds[i] = dst(E_p[i]);
    end
    pathNodes = vcat(srcNds,dstNds);

end

export
    PRM
    # RRT:it is missing the RoadMapRRT but the colission functions are available
end

#Future version will accept a Road Map taken from "CreateGenericObjectsIn3DSpace.jl" file and
#run the PRM and RRT algorithms. 
